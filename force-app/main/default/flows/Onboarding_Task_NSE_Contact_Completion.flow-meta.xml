<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>53.0</apiVersion>
    <decisions>
        <description>Check the CC_Wireless_AP_Make__c field on the Organisation in order to decide which comms to send.</description>
        <name>Wireless_AP_Make</name>
        <label>Wireless AP Make</label>
        <locationX>182</locationX>
        <locationY>815</locationY>
        <defaultConnector>
            <targetReference>Update_Ruckus_Task</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Not Ruckus</defaultConnectorLabel>
        <rules>
            <name>Ruckus</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Account.CC_Wireless_AP_Make__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Ruckus</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Update_Schedule_Task</targetReference>
            </connector>
            <label>Ruckus</label>
        </rules>
    </decisions>
    <description>V10: removed all contract completion emails to designation authority / case contact. These emails now send using task template action. 
Logic for Ruckus vs NonRuckus is in TaskActionController apex class
Triggers on ES Contraction Completion updated to Completed.
Emails Designated Authority (and Case Contact where requested) and posts to chatter on the Case that this was done.

https://n4lconz.atlassian.net/browse/SFB-395</description>
    <environments>Default</environments>
    <interviewLabel>Onboarding Task - NSE Contact Completion {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Onboarding Task - NSE Contract Completion</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordLookups>
        <description>Get the Organisation record (account) the Case is related to, in order to view the CC_Wireless_AP_Make__c field for decision making (either Ruckus or non-Ruckus).</description>
        <name>Get_Account</name>
        <label>Get Account</label>
        <locationX>182</locationX>
        <locationY>695</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Wireless_AP_Make</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_Case.AccountId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Account</object>
        <queriedFields>Id</queriedFields>
        <queriedFields>CC_Wireless_AP_Make__c</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Find the Authorised Signatory contact from the Opportunity the Case is related to.</description>
        <name>Get_Authorised_Signatory</name>
        <label>Get Authorised Signatory</label>
        <locationX>182</locationX>
        <locationY>575</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_Account</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>OpportunityId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_Opportunity.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>Role</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Authorised Signatory</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>OpportunityContactRole</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Find the Case record related to the triggering task by the WhatID (related to ID) field.</description>
        <name>Get_Case</name>
        <label>Get Case</label>
        <locationX>182</locationX>
        <locationY>335</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_Opportunity</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.WhatId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Case</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Find the Opportunity related to the Case. This is needed for Opportunity Contact Roles.</description>
        <name>Get_Opportunity</name>
        <label>Get Opportunity</label>
        <locationX>182</locationX>
        <locationY>455</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_Authorised_Signatory</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_Case.Opportunity__c</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Opportunity</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>Update_Ruckus_Task</name>
        <label>Update Ruckus Task</label>
        <locationX>314</locationX>
        <locationY>935</locationY>
        <filterLogic>1 AND (2 OR 3 OR 4)</filterLogic>
        <filters>
            <field>WhatId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.WhatId</elementReference>
            </value>
        </filters>
        <filters>
            <field>Type</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Schedule Ruckus Migration</stringValue>
            </value>
        </filters>
        <filters>
            <field>Type</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>ZoneDirector Return</stringValue>
            </value>
        </filters>
        <filters>
            <field>Type</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Ruckus Migration Completed</stringValue>
            </value>
        </filters>
        <inputAssignments>
            <field>Status</field>
            <value>
                <stringValue>Not Required</stringValue>
            </value>
        </inputAssignments>
        <object>Task</object>
    </recordUpdates>
    <recordUpdates>
        <name>Update_Schedule_Task</name>
        <label>Update Schedule Task</label>
        <locationX>50</locationX>
        <locationY>935</locationY>
        <filterLogic>and</filterLogic>
        <filters>
            <field>WhatId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.WhatId</elementReference>
            </value>
        </filters>
        <filters>
            <field>Type</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Schedule Ruckus Migration</stringValue>
            </value>
        </filters>
        <filters>
            <field>Status</field>
            <operator>NotEqualTo</operator>
            <value>
                <stringValue>Completed</stringValue>
            </value>
        </filters>
        <filters>
            <field>Status</field>
            <operator>NotEqualTo</operator>
            <value>
                <stringValue>Resolved</stringValue>
            </value>
        </filters>
        <inputAssignments>
            <field>Status</field>
            <value>
                <stringValue>In Progress</stringValue>
            </value>
        </inputAssignments>
        <object>Task</object>
    </recordUpdates>
    <start>
        <locationX>56</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Get_Case</targetReference>
        </connector>
        <doesRequireRecordChangedToMeetCriteria>true</doesRequireRecordChangedToMeetCriteria>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Type</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Contract Completion</stringValue>
            </value>
        </filters>
        <filters>
            <field>Programme__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Equipment Support</stringValue>
            </value>
        </filters>
        <filters>
            <field>Status</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Completed</stringValue>
            </value>
        </filters>
        <object>Task</object>
        <recordTriggerType>Update</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Active</status>
    <variables>
        <name>TaskScheduleRuckusMigration</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Task</objectType>
    </variables>
</Flow>
